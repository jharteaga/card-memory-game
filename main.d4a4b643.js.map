{"version":3,"sources":["js/cards.js","js/main.js"],"names":["images","name","image","allianz","campNou","eiffel","tunco","golden","london","romania","taj","thailand","vancouver","cardSelected1","cardSelected2","t","timerText","document","querySelector","cards","querySelectorAll","cardsNotPlaying","count","seconds","minutes","hours","cardsMatched","init","sort","Math","random","i","length","childNodes","imgChild","card","createElement","setAttribute","className","appendChild","addCardEvents","timer","add","textContent","setTimeout","blockedBoard","filter","forEach","classList","enableBoard","remove","assignPairToCheck","element","checkPair","card1","img","index","id","card2","pairFound","incorrectPair","isFinished","reset","clearTimeout","flipEvent","elements","addEventListener","toggle","contains","style","visibility"],"mappings":"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","file":"main.d4a4b643.js","sourceRoot":"..","sourcesContent":["import allianz from '../assets/img/allianz-arena.jpg';\r\nimport campNou from '../assets/img/camp-nou.jpg';\r\nimport eiffel from '../assets/img/eiffel-tower.jpg';\r\nimport tunco from '../assets/img/el-tunco.jpg';\r\nimport golden from '../assets/img/golden-gate-bridge.jpg';\r\nimport london from '../assets/img/london.jpg';\r\nimport romania from '../assets/img/romania.jpg';\r\nimport taj from '../assets/img/taj-mahal.jpeg';\r\nimport thailand from '../assets/img/thailand.jpg';\r\nimport vancouver from '../assets/img/vancouver.jpg';\r\n\r\nexport const images = [\r\n  {\r\n    name: 'card1',\r\n    image: allianz\r\n  },\r\n  {\r\n    name: 'card2',\r\n    image: allianz\r\n  },\r\n  {\r\n    name: 'card3',\r\n    image: campNou\r\n  },\r\n  {\r\n    name: 'card4',\r\n    image: campNou\r\n  },\r\n  {\r\n    name: 'card5',\r\n    image: eiffel\r\n  },\r\n  {\r\n    name: 'card6',\r\n    image: eiffel\r\n  },\r\n  {\r\n    name: 'card7',\r\n    image: tunco\r\n  },\r\n  {\r\n    name: 'card8',\r\n    image: tunco\r\n  },\r\n  {\r\n    name: 'card9',\r\n    image: golden\r\n  },\r\n  {\r\n    name: 'card10',\r\n    image: golden\r\n  },\r\n  {\r\n    name: 'card11',\r\n    image: london\r\n  },\r\n  {\r\n    name: 'card12',\r\n    image: london\r\n  },\r\n  {\r\n    name: 'card13',\r\n    image: romania\r\n  },\r\n  {\r\n    name: 'card14',\r\n    image: romania\r\n  },\r\n  {\r\n    name: 'card15',\r\n    image: taj\r\n  },\r\n  {\r\n    name: 'card16',\r\n    image: taj\r\n  },\r\n  {\r\n    name: 'card17',\r\n    image: thailand\r\n  },\r\n  {\r\n    name: 'card18',\r\n    image: thailand\r\n  },\r\n  {\r\n    name: 'card19',\r\n    image: vancouver\r\n  },\r\n  {\r\n    name: 'card20',\r\n    image: vancouver\r\n  }\r\n];\r\n","import { images } from './cards';\r\n\r\nconst timerText = document.querySelector('.container__header__timer');\r\nconst cards = document.querySelectorAll('.container__cards__card');\r\nlet cardSelected1,\r\n  cardSelected2,\r\n  cardsNotPlaying = [],\r\n  count = 0,\r\n  seconds = 0,\r\n  minutes = 0,\r\n  hours = 0,\r\n  t,\r\n  cardsMatched = 0;\r\n\r\ninit();\r\n\r\n//Initiate Game\r\nfunction init() {\r\n  images.sort(() => 0.9 - Math.random());\r\n  for (let i = 0; i < cards.length; i++) {\r\n    const imgChild = cards[i].childNodes[1];\r\n\r\n    const card = document.createElement('img');\r\n    card.setAttribute('src', images[i].image);\r\n    card.className = 'container__cards__card__img';\r\n    cards[i].appendChild(card);\r\n  }\r\n\r\n  addCardEvents(cards);\r\n\r\n  timer();\r\n}\r\n\r\n//Timer Event\r\nfunction add() {\r\n  seconds++;\r\n  if (seconds >= 60) {\r\n    seconds = 0;\r\n    minutes++;\r\n    if (minutes >= 60) {\r\n      minutes = 0;\r\n      hours++;\r\n    }\r\n  }\r\n\r\n  timerText.textContent =\r\n    (hours ? (hours > 9 ? hours : '0' + hours) : '00') +\r\n    ':' +\r\n    (minutes ? (minutes > 9 ? minutes : '0' + minutes) : '00') +\r\n    ':' +\r\n    (seconds > 9 ? seconds : '0' + seconds);\r\n\r\n  timer();\r\n}\r\n\r\nfunction timer() {\r\n  t = setTimeout(add, 1000);\r\n}\r\n\r\n//Block Board Game\r\nfunction blockedBoard() {\r\n  cardsNotPlaying = [...cards].filter(\r\n    (card) => card !== cardSelected1 && card !== cardSelected2\r\n  );\r\n\r\n  cardsNotPlaying.forEach((card) => {\r\n    card.classList.add('container__cards__card--blocked');\r\n  });\r\n}\r\n\r\n//Enable Board Game\r\nfunction enableBoard() {\r\n  cardsNotPlaying.forEach((card) => {\r\n    card.classList.remove('container__cards__card--blocked');\r\n  });\r\n}\r\n\r\n//Assign pair to check them\r\nfunction assignPairToCheck(element) {\r\n  if (count === 0) {\r\n    cardSelected1 = element;\r\n    count++;\r\n  } else if (count === 1) {\r\n    cardSelected2 = element;\r\n    blockedBoard();\r\n    checkPair();\r\n  }\r\n}\r\n\r\n//Check pairs\r\nfunction checkPair() {\r\n  const card1 = images.filter(\r\n    (img, index) => `card${index + 1}` === cardSelected1.id\r\n  );\r\n  const card2 = images.filter(\r\n    (img, index) => `card${index + 1}` === cardSelected2.id\r\n  );\r\n\r\n  if (card1[0].image === card2[0].image) {\r\n    pairFound();\r\n  } else {\r\n    incorrectPair();\r\n  }\r\n}\r\n\r\n//Pair Found\r\nfunction pairFound() {\r\n  cardSelected1.classList.remove('container__cards__card--flip-front');\r\n  cardSelected1.classList.remove('container__cards__card--flip-back');\r\n\r\n  cardSelected2.classList.remove('container__cards__card--flip-front');\r\n  cardSelected2.classList.remove('container__cards__card--flip-back');\r\n\r\n  cardSelected1.classList.add('container__cards__card--found');\r\n  cardSelected2.classList.add('container__cards__card--found');\r\n\r\n  cardsMatched += 2;\r\n\r\n  isFinished();\r\n\r\n  reset();\r\n}\r\n\r\nfunction isFinished() {\r\n  if (cardsMatched === cards.length) {\r\n    clearTimeout(t);\r\n  }\r\n}\r\n\r\n//Incorrect pair\r\nfunction incorrectPair() {\r\n  setTimeout(() => {\r\n    flipEvent(cardSelected1);\r\n    flipEvent(cardSelected2);\r\n  }, 800);\r\n}\r\n\r\n//Add events listeners\r\nfunction addCardEvents(elements) {\r\n  elements.forEach((element) => {\r\n    element.addEventListener('click', () => {\r\n      flipEvent(element);\r\n    });\r\n  });\r\n}\r\n\r\n//Flip Event\r\nfunction flipEvent(element) {\r\n  element.classList.toggle('container__cards__card--flip-front');\r\n  element.classList.toggle('container__cards__card--flip-back');\r\n\r\n  setTimeout(() => {\r\n    if (element.classList.contains('container__cards__card--flip-back')) {\r\n      element.childNodes[1].style.visibility = 'hidden';\r\n      element.childNodes[3].style.visibility = 'visible';\r\n      assignPairToCheck(element);\r\n    } else {\r\n      element.childNodes[1].style.visibility = 'visible';\r\n      element.childNodes[3].style.visibility = 'hidden';\r\n      reset();\r\n    }\r\n  }, 360);\r\n}\r\n\r\n//Reset event\r\nfunction reset() {\r\n  count = 0;\r\n  enableBoard();\r\n  cardSelected1 = null;\r\n  cardSelected2 = null;\r\n  cardsNotPlaying = [];\r\n}\r\n"]}